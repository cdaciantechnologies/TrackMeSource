<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />
<mvc:cors>
<mvc:mapping path="/api/**" />
</mvc:cors>
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/html/**" location="/html/" />
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="org.postgresql.Driver" />
		<beans:property name="url"
			value="jdbc:postgresql://localhost:5432/trackme" />
		<beans:property name="username" value="postgres" />
		<beans:property name="password" value="root" />
	</beans:bean>

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<beans:bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.trackme.spring.model.Person</beans:value>
				<beans:value>com.trackme.spring.model.VehicleMaster</beans:value>
				<beans:value>com.trackme.spring.model.UserMaster</beans:value>
				<beans:value>com.trackme.spring.model.DriverMaster</beans:value>
				<beans:value>com.trackme.spring.model.VehicleGroup</beans:value>
				<beans:value>com.trackme.spring.model.FuelDetail</beans:value>
				<beans:value>com.trackme.spring.model.Route</beans:value>
				<beans:value>com.trackme.spring.model.RouteSchedule</beans:value>
				<beans:value>com.trackme.spring.model.DeviceMaster</beans:value>
					<beans:value>com.trackme.spring.model.Alert</beans:value>
				<beans:value>com.trackme.spring.model.Movement</beans:value>
					<beans:value>com.trackme.spring.model.Location</beans:value>
				<beans:value>com.trackme.spring.model.CompanyMaster</beans:value>
				   <beans:value>com.trackme.spring.model.VehicleIO</beans:value>
                <beans:value>com.trackme.spring.model.GeoFenceDetail</beans:value>
			    <beans:value>com.trackme.spring.model.RoleMaster</beans:value>
		    <beans:value>com.trackme.spring.model.LinkConf</beans:value>
		    <beans:value>com.trackme.spring.model.LocationsForRoute</beans:value>
		        <beans:value>com.trackme.spring.model.VehicleService</beans:value>
		        <beans:value>com.trackme.spring.model.Student</beans:value>
		       <beans:value>com.trackme.spring.model.DriverConf</beans:value>
		
		</beans:list>
		</beans:property>
		
		<beans:property name="hibernateProperties">
			<beans:props>
			  <beans:prop key="hibernate.dialect">org.hibernate.spatial.dialect.postgis.PostgisDialect
				</beans:prop>
				<!-- <beans:prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect
				</beans:prop> -->
				<beans:prop key="hibernate.show_sql">true</beans:prop>
			<beans:prop key="packagesToScan">com.trackme.spring.model</beans:prop>
		<beans:prop key="hibernate.enable_lazy_load_no_trans">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="personDAO" class="com.trackme.spring.dao.PersonDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	<beans:bean id="personService" class="com.trackme.spring.service.PersonServiceImpl">
		<beans:property name="personDAO" ref="personDAO"></beans:property>
	</beans:bean>
	
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

		 <!-- setting maximum upload size -->
		<beans:property name="maxUploadSize" value="100000" />

	</beans:bean>
	<context:component-scan base-package="com.trackme.spring" />
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
  <beans:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
  <beans:property name="dataSource" ref="dataSource"></beans:property>  
  </beans:bean> 
  
  
  <!-- For times when you need more complex processing, passing data to the scheduled job -->
<beans:bean name="complexJobDetail"    class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    <beans:property name="jobClass" value="com.trackme.spring.quartz.ScheduledJob" />
    
     <beans:property name="jobDataMap">
        <beans:map>
            <beans:entry key="scheduledJobService" value-ref="scheduledJobService" />
        </beans:map>
    </beans:property>
    
    <beans:property name="durability" value="true" />
</beans:bean>

<beans:bean id="cronTrigger"  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    <beans:property name="jobDetail" ref="complexJobDetail" />
    <beans:property name="cronExpression" value="0 0/15 * 1/1 * ? *" />
</beans:bean>




 <!-- For times when you need more complex processing, passing data to the scheduled job -->
<beans:bean name="complexJobDetailNot"    class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    <beans:property name="jobClass" value="com.trackme.spring.quartz.ScheduledNotificationJob" />
    
     <beans:property name="jobDataMap">
        <beans:map>
            <beans:entry key="scheduledJobService" value-ref="scheduledJobService" />
        </beans:map>
    </beans:property>
    
    <beans:property name="durability" value="true" />
</beans:bean>

<beans:bean id="cronTriggerNot"  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    <beans:property name="jobDetail" ref="complexJobDetailNot" />
    <beans:property name="cronExpression" value="0 0/3 * 1/1 * ? *" />
</beans:bean>


<beans:bean  class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    <beans:property name="jobDetails">
        <beans:list>
            <beans:ref bean="complexJobDetail" />
            <beans:ref bean="complexJobDetailNot" />
        </beans:list>
    </beans:property>
 
    <beans:property name="triggers">
        <beans:list>
            <beans:ref bean="cronTrigger" />
            <beans:ref bean="cronTriggerNot" />
        </beans:list>
    </beans:property>
</beans:bean>







<beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <beans:property name="host" value="smtpout.asia.secureserver.net" />
    <beans:property name="port" value="25" />
    <beans:property name="protocol" value="smtps" />
    <beans:property name="username" value="info@adhata.in" />
    <beans:property name="password" value="Adhata%239" />
    <beans:property name="javaMailProperties">
    <beans:props>
        <beans:prop key="mail.smtps.auth">true</beans:prop>
    </beans:props>
    </beans:property>
</beans:bean>

</beans:beans>
